{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["inlineStyle","background","opacity","left","top","position","padding","transform","App","style","textAlign","bgImage","strength","height","className","blur","min","max","textDecoration","color","cursor","fontWeight","href","target","renderLayer","percentage","width","borderRadius","overflow","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAaMA,G,MAAc,CAClBC,WAAY,OACZC,QAAS,MACTC,KAAM,MACNC,IAAK,MACLC,SAAU,WACVC,QAAS,OACTC,UAAW,0BAiJEC,MA9If,WACE,OACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,kBAAC,WAAD,CAAUC,QArBd,yIAqB+BC,SAAU,KACnC,yBAAKH,MAAO,CAAEI,OAAQ,MACpB,yBAAKC,UAAU,aAAaL,MAAOT,GACjC,uEACA,4EAIN,kBAAC,WAAD,CAAUW,QA3Bd,mJA2B+BI,KAAM,CAAEC,KAAM,EAAGC,IAAK,IAC/C,yBAAKR,MAAO,CAAEI,OAAQ,MACpB,yBAAKJ,MAAOT,GACV,uBACES,MAAO,CACLS,eAAgB,OAChBC,MAAO,QACPC,OAAQ,QACRC,WAAY,QAEdC,KAAK,kCACLC,OAAO,UART,8BAaA,6BAEA,wEACA,yBAAKT,UAAU,WACb,uBACEL,MAAO,CACLS,eAAgB,OAChBC,MAAO,QACPC,OAAQ,QACRC,WAAY,OAEdC,KAAK,uBACLC,OAAO,UART,8BAYA,6BACA,4FAGA,6BACA,6BACA,uBACEd,MAAO,CACLS,eAAgB,OAChBC,MAAO,QACPC,OAAQ,QACRC,WAAY,OAEdC,KAAK,+CACLC,OAAO,UART,+BAYA,6BACA,+EACA,6BACA,6BACA,uBACEd,MAAO,CACLS,eAAgB,OAChBC,MAAO,QACPC,OAAQ,QACRC,WAAY,OAEdC,KAAK,yCACLC,OAAO,UART,wDAYA,6BACA,6FAGA,6BACA,iCAKR,kBAAC,WAAD,CAAUZ,QArGd,0FAqG+BC,UAAW,KACpC,yBAAKH,MAAO,CAAEI,OAAQ,MACpB,yBAAKJ,MAAOT,GACV,uBACES,MAAO,CACLS,eAAgB,OAChBC,MAAO,QACPC,OAAQ,QACRC,WAAY,QAEdC,KAAK,oCACLC,OAAO,UART,8CAeN,kBAAC,WAAD,CACEZ,QAtHN,2IAuHMC,SAAU,IACVY,YAAa,SAACC,GAAD,OACX,yBACEhB,MAAO,CACLJ,SAAU,WACVqB,MAAO,QACPb,OAAQ,QACRc,aAAc,MACd1B,WAAW,oBAAD,OAAmC,EAAbwB,EAAtB,KACVtB,KAAM,MACNC,IAAK,MACLG,UAAU,+BAAD,OAA8C,EAAbkB,EAAjC,UAKf,yBAAKhB,MAAO,CAAEI,OAAQ,MACpB,yBAAKJ,MAAOT,GACV,4BACES,MAAO,CACLJ,SAAU,WACVuB,SAAU,SACVC,OAAQ,qBAJZ,iCAYN,yBAAKpB,MAAO,CAAEI,OAAQ,aCpJRiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6417b18d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Parallax } from \"react-parallax\";\nimport \"./App.css\";\n\nconst image1 =\n  \"https://images.unsplash.com/photo-1599941634517-31390cacc03f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\";\nconst image2 =\n  \"https://brightcove04pmdo-a.akamaihd.net/5104226627001/5104226627001_5297440765001_5280261645001-vs.jpg?pubId=5104226627001&videoId=5280261645001\";\nconst image3 =\n  \"https://img00.deviantart.net/2bd0/i/2009/276/c/9/magic_forrest_wallpaper_by_goergen.jpg\";\nconst image4 =\n  \"https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/empire-state-building-black-and-white-square-format-john-farnan.jpg\";\n\nconst inlineStyle = {\n  background: \"#fff\",\n  opacity: \"0.7\",\n  left: \"50%\",\n  top: \"50%\",\n  position: \"absolute\",\n  padding: \"20px\",\n  transform: \"translate(-50%, -50%)\",\n};\n\nfunction App() {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Parallax bgImage={image1} strength={500}>\n        <div style={{ height: 500 }}>\n          <div className=\"typewriter\" style={inlineStyle}>\n            <h1>Hello Universe Tech. My name is Andrew.</h1>\n            <small>Please Scroll Down for my Github Repo.</small>\n          </div>\n        </div>\n      </Parallax>\n      <Parallax bgImage={image2} blur={{ min: -3, max: 7 }}>\n        <div style={{ height: 500 }}>\n          <div style={inlineStyle}>\n            <a\n              style={{\n                textDecoration: \"none\",\n                color: \"black\",\n                cursor: \"hover\",\n                fontWeight: \"1000\",\n              }}\n              href=\"https://github.com/andrewtclin/\"\n              target=\"_blank\"\n            >\n              My Github Repo: Click Here\n            </a>\n\n            <br />\n\n            <h4>The followings are my Personal Projects:</h4>\n            <div className=\"gitRepo\">\n              <a\n                style={{\n                  textDecoration: \"none\",\n                  color: \"black\",\n                  cursor: \"hover\",\n                  fontWeight: \"500\",\n                }}\n                href=\"clone-27359.web.app/\"\n                target=\"_blank\"\n              >\n                1. Amazon Clone - Click Me\n              </a>\n              <br />\n              <small>\n                Uses ReactJS, ContextAPI, Hooks, Firebase, Stripe Payment\n              </small>\n              <br />\n              <br />\n              <a\n                style={{\n                  textDecoration: \"none\",\n                  color: \"black\",\n                  cursor: \"hover\",\n                  fontWeight: \"500\",\n                }}\n                href=\"https://andrewtclin.github.io/spotify-clone/\"\n                target=\"_blank\"\n              >\n                2. Spotify Clone - Click Me\n              </a>\n              <br />\n              <small>Uses ReactJS, ContextAPI, Hooks, Material UI</small>\n              <br />\n              <br />\n              <a\n                style={{\n                  textDecoration: \"none\",\n                  color: \"black\",\n                  cursor: \"hover\",\n                  fontWeight: \"500\",\n                }}\n                href=\"https://crwn-essentials.herokuapp.com/\"\n                target=\"_blank\"\n              >\n                3. E-Commerce Website With Google Sign-in - Click Me\n              </a>\n              <br />\n              <small>\n                Uses ReactJS, Redux (Thunk+Saga), Firebase, Stripe Payment\n              </small>\n              <br />\n              <br />\n            </div>\n          </div>\n        </div>\n      </Parallax>\n      <Parallax bgImage={image3} strength={-200}>\n        <div style={{ height: 500 }}>\n          <div style={inlineStyle}>\n            <a\n              style={{\n                textDecoration: \"none\",\n                color: \"black\",\n                cursor: \"hover\",\n                fontWeight: \"1000\",\n              }}\n              href=\"https://tclin-andrew.netlify.app/\"\n              target=\"_blank\"\n            >\n              Click Here for my Website and Portfolio\n            </a>\n          </div>\n        </div>\n      </Parallax>\n      <Parallax\n        bgImage={image4}\n        strength={200}\n        renderLayer={(percentage) => (\n          <div\n            style={{\n              position: \"absolute\",\n              width: \"100px\",\n              height: \"100px\",\n              borderRadius: \"50%\",\n              background: `rgba(255,123,23, ${percentage * 1})`,\n              left: \"50%\",\n              top: \"50%\",\n              transform: `translate(-50%, -50%) scale(${percentage * 5})`,\n            }}\n          ></div>\n        )}\n      >\n        <div style={{ height: 500 }}>\n          <div style={inlineStyle}>\n            <strong\n              style={{\n                position: \"relative\",\n                overflow: \"hidden\",\n                filter: \"brightness(200%)\",\n              }}\n            >\n              Thank you for taking time.\n            </strong>\n          </div>\n        </div>\n      </Parallax>\n      <div style={{ height: \"100vh\" }}></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}